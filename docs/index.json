[{"categories":null,"content":"待补充… ","date":"2023-05-28","objectID":"/post/tutorial/hugo_giscus/:1:0","tags":["hugo","giscus","discussion","评论"],"title":"Hugo博客开启Giscus评论功能","uri":"/post/tutorial/hugo_giscus/"},{"categories":["ide"],"content":"需求 老版本的IDEA在project下面都有一个commit的对话框，但是在2022版本默认没有这个。 ","date":"2023-05-28","objectID":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/:1:0","tags":["idea","commit"],"title":"IDEA 2022版本没有commit对话框","uri":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/"},{"categories":["ide"],"content":"解决 打开方式：Settings -\u003e Version Contrl -\u003e Commit，勾选上Use non-modal commit interface，则还原为老版本。 ","date":"2023-05-28","objectID":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/:2:0","tags":["idea","commit"],"title":"IDEA 2022版本没有commit对话框","uri":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/"},{"categories":["ide"],"content":"参考 IDEA 2022版本没有commit 对话框 ","date":"2023-05-28","objectID":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/:3:0","tags":["idea","commit"],"title":"IDEA 2022版本没有commit对话框","uri":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/"},{"categories":["MySQL"],"content":"问题描述 删除一个较大体量的数据库后，发现mysql无法正常执行sql脚本，并给出以下报错： [error]/tmp/ib1tJjCi file has no space left 同时，发现服务器磁盘根目录满了！ [root@template ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/vda3 16G 15G 20K 100% / devtmpfs 32G 0 32G 0% /dev tmpfs 32G 0 32G 0% /dev/shm tmpfs 32G 3.3G 29G 11% /run tmpfs 32G 0 32G 0% /sys/fs/cgroup /dev/mapper/data-data_lv 600G 21G 579G 4% /data /dev/vda1 497M 123M 375M 25% /boot tmpfs 6.3G 0 6.3G 0% /run/user/1002 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:1:0","tags":["mysql","linux","ibtmp1","error"],"title":"mysql执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"问题定位 执行命令： [root@template ~]# lsof |egrep 'tmp|deleted' ... mysqld 19544 20112 mysql 13u REG 253,3 0 8412343 /tmp/ibX4BLkY (deleted) mysqld 19544 20112 mysql 281u REG 253,3 0 8414596 /tmp/MLhfq6Il (deleted) mysqld 19544 20137 mysql 6u REG 253,3 0 8388677 /tmp/ib70QbfZ (deleted) mysqld 19544 20137 mysql 7u REG 253,3 0 8412302 /tmp/ibrctchx (deleted) mysqld 19544 20137 mysql 8u REG 253,3 0 8412305 /tmp/ibhPedj5 (deleted) mysqld 19544 20137 mysql 9u REG 253,3 0 8412317 /tmp/ib1tJjCi (deleted) mysqld 19544 20137 mysql 12uW REG 252,0 12582912 537507500 /data/mysql/ibtmp1 mysqld 19544 20137 mysql 13u REG 253,3 0 8412343 /tmp/ibX4BLkY (deleted) mysqld 19544 20137 mysql 281u REG 253,3 0 8414596 /tmp/MLhfq6Il (deleted) mysqld 19544 20138 mysql 6u REG 253,3 0 8388677 /tmp/ib70QbfZ (deleted) mysqld 19544 20138 mysql 7u REG 253,3 0 8412302 /tmp/ibrctchx (deleted) mysqld 19544 20138 mysql 8u REG 253,3 0 8412305 /tmp/ibhPedj5 (deleted) mysqld 19544 20138 mysql 9u REG 253,3 0 8412317 /tmp/ib1tJjCi (deleted) ... 发现mysqld进程有大量临时文件没有释放磁盘空间。 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:2:0","tags":["mysql","linux","ibtmp1","error"],"title":"mysql执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"进一步定位 进入mysql安装目录，发现ibtmp1文件非常大 -rw-r----- 1 mysql mysql 41K May 22 12:33 ib_buffer_pool -rw-r----- 1 mysql mysql 268M May 23 00:13 ibdata1 -rw-r----- 1 mysql mysql 3.0G May 23 00:13 ib_logfile0 -rw-r----- 1 mysql mysql 3.0G May 23 00:13 ib_logfile1 -rw-r----- 1 mysql mysql 142G May 22 23:57 ibtmp1 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:3:0","tags":["mysql","linux","ibtmp1","error"],"title":"mysql执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"解决 修改 my.cnf 配置文件 innodb_temp_data_file_path = ibtmp1:12M:autoextend:max:5G 进入mysql命令行，设置 innodb_fast_shutdown 参数 SET GLOBAL innodb_fast_shutdown = 0; 关闭 mysql 服务 systemctl stop mysqld 删除 ibtmp1 文件（重启自动删除） 启动 mysql 服务 systemctl start mysqld ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:4:0","tags":["mysql","linux","ibtmp1","error"],"title":"mysql执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"知识链接 innodb_fast_shutdown参数有3个值： 0 1 (默认值) 2 支持全动态局设置。 使用场景：在做数据库关闭升级的时候set global innodb_fast_shutdown=0，这样能最大保障数据的完整性。 设置为1：关闭MySQL的时候不会做清除脏页和插入缓冲区的合并操作，也不会将脏页刷新到磁盘 设置为0：会做清除脏页和插入缓冲区的合并操作，也会将脏页全部刷新到磁盘上面去，但是这个时候关闭的速度也是最慢的 设置为2：不会做清除脏页和插入缓冲区的合并操作，也不会将脏页刷新到磁盘，但是会刷新到redo log里面，再下次启动mysql的时候恢复 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:5:0","tags":["mysql","linux","ibtmp1","error"],"title":"mysql执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"参考 mysql导致根目录爆满_MYSQL临时表导致根分区爆满问题分析 MySQL · 故障处理 · ibtmp1 文件过大 Mysql innodb_fast_shutdown ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:6:0","tags":["mysql","linux","ibtmp1","error"],"title":"mysql执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"k8s部署MySQL 5.7 ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:1:0","tags":["k8s","mysql"],"title":"K8S部署MySQL-5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["MySQL"],"content":"ConfigMap apiVersion: v1 kind: ConfigMap metadata: name: mysql-config namespace: mysql labels: app: mysql data: my.cnf: |- [client] default-character-set=utf8mb4 [mysql] default-character-set=utf8mb4 [mysqld] character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci init_connect='SET NAMES utf8mb4' skip-character-set-client-handshake = true max_connections=2000 secure_file_priv=/var/lib/mysql bind-address=0.0.0.0 symbolic-links=0 sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:1:1","tags":["k8s","mysql"],"title":"K8S部署MySQL-5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["MySQL"],"content":"Service apiVersion: v1 kind: Service metadata: labels: app: mysql name: mysql-svc namespace: mysql spec: type: NodePort ports: - name: http port: 3306 protocol: TCP targetPort: 3306 selector: app: mysql ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:1:2","tags":["k8s","mysql"],"title":"K8S部署MySQL-5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["MySQL"],"content":"Deployment apiVersion: apps/v1 kind: Deployment metadata: name: mysql namespace: mysql spec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: containers: - args: - --datadir - /var/lib/mysql/datadir env: - name: MYSQL_ROOT_PASSWORD value: root - name: MYSQL_USER value: user - name: MYSQL_PASSWORD value: user image: mysql:5.7 name: mysql-container ports: - containerPort: 3306 name: dbapi volumeMounts: - mountPath: /var/lib/mysql name: mysql-storage - name: config mountPath: /etc/mysql/conf.d/my.cnf subPath: my.cnf volumes: - name: mysql-storage hostPath: path: /data/k8s/volumes/mysql type: Directory - name: config configMap: name: mysql-config - name: localtime hostPath: type: File path: /etc/localtime ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:1:3","tags":["k8s","mysql"],"title":"K8S部署MySQL-5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["Redis"],"content":"k8s部署redis 3.0.7 ","date":"2023-05-21","objectID":"/post/redis/2023-05-21/redis_k8s/:1:0","tags":["k8s","mysql"],"title":"K8S部署Redis-3.0.7","uri":"/post/redis/2023-05-21/redis_k8s/"},{"categories":["Redis"],"content":"Deployment apiVersion: apps/v1 kind: Deployment metadata: name: redis labels: app: redis spec: replicas: 1 selector: matchLabels: app: redis template: metadata: labels: app: redis spec: containers: - name: redis image: redis:3.0.7 command: - \"sh\" - \"-c\" - \"redis-server /usr/local/redis/redis.conf\" ports: - containerPort: 6379 resources: limits: cpu: 1000m memory: 1024Mi requests: cpu: 1000m memory: 1024Mi livenessProbe: tcpSocket: port: 6379 initialDelaySeconds: 300 timeoutSeconds: 1 periodSeconds: 10 successThreshold: 1 failureThreshold: 3 readinessProbe: tcpSocket: port: 6379 initialDelaySeconds: 5 timeoutSeconds: 1 periodSeconds: 10 successThreshold: 1 failureThreshold: 3 volumeMounts: - name: config mountPath: /usr/local/redis/redis.conf subPath: redis.conf volumes: - name: config configMap: name: redis-config ","date":"2023-05-21","objectID":"/post/redis/2023-05-21/redis_k8s/:1:1","tags":["k8s","mysql"],"title":"K8S部署Redis-3.0.7","uri":"/post/redis/2023-05-21/redis_k8s/"},{"categories":["ide"],"content":"简介 theiaide安装过程中诸多报错问题解决记录文档。 代码：https://github.com/eclipse-theia/theia 文档：https://github.com/eclipse-theia/theia/tree/master/doc#quick-start，theia/doc/Developing.md文件 git clone https://kgithub.com/eclipse-theia/theia \\ \u0026\u0026 cd theia \\ \u0026\u0026 yarn \\ \u0026\u0026 yarn download:plugins \\ \u0026\u0026 yarn browser build \\ \u0026\u0026 yarn browser start ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:1:0","tags":["theia","ide","webide","error"],"title":"Theiaide主机部署","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"问题1：安装依赖报错，前置依赖版本不匹配 根据提示，安装相应版本的依赖 # CentOS安装软件包命令模板 yum install -y \u003cpackage name\u003e-\u003cversion\u003e ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:2:0","tags":["theia","ide","webide","error"],"title":"Theiaide主机部署","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"问题2：yarn安装依赖过程中，gyp报错：exit status 2 报错原因： 缺少bzip2命令，安装依赖过程中，无法解压压缩包导致报错。 解决方法： 安装bzip2命令 yum install -y bzip2 ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:3:0","tags":["theia","ide","webide","error"],"title":"Theiaide主机部署","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"theiaide配置文件模块分析 待补充… ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:4:0","tags":["theia","ide","webide","error"],"title":"Theiaide主机部署","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"参考 theiaide doc - Github 部署相关说明部分在theia/doc/Developing.md文件中 ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:5:0","tags":["theia","ide","webide","error"],"title":"Theiaide主机部署","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["Nginx"],"content":"问题现象 project服务默认使用端口80，我们通过修改配置，将其端口修改为A，并增加路由前缀/project/。 现在，project服务访问地址为：http://x.x.x.x:A/project/。 我们在Nginx里做了一层代理，Nginx配置如下： server { listen B ssl; server_name y.y.y.y; ... location /project/ { proxy_pass http://x.x.x.x:A/project/; } } 代理之后，当project服务返回302重定向时，端口就会消失，流程如下： 访问project主页地址：http://x.x.x.x:A/project/； 查看请求信息，可以看到如下信息，说明URL重定向到了登录页面，但是丢失了端口： General: Status Code: 302 Found Response Headers： Location: https://x.x.x.x/project/signin # 这里给出的地址就是重定向后的目标地址 手动添加端口后访问页面正常：https://x.x.x.x:A/project/signin ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:1:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"初步尝试 最开始的解决方案是修改响应头里的Location字段。 参考资料 Apache和Nginx自定义修改Response Header中的Location值 Nginx里Header修改 但由于改动过大，放弃了该方案。 经过进一步查找资料，进行了如下配置。配完以后，发现端口不再丢失，但是协议从https变成了http。 location /project/ { proxy_set_header Host $http_host; # 添加了这一行 proxy_pass http://x.x.x.x:A/project/; } ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:2:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"不完美解决方案 其实算是个不完整的Nginx配置，配置步骤如下： 将请求代理到http协议的80端口； server { listen B ssl; server_name y.y.y.y; ... location /project/ { # 1、现将请求代理到http协议的B端口（内部映射到80） proxy_set_header Host $host:80; proxy_pass http://x.x.x.x:A/project/; } } 再将80端口的请求全部重定向到https协议的A端口。 server { listen 80; server_name y.y.y.y; ... # 2、将http-80端口的全部请求重定向到https-B端口 location / { return 301 https://x.x.x.x:B$request_uri; } } ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:3:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"最终解决方案 server { listen B ssl; server_name y.y.y.y; ... location /project/ { proxy_pass http://x.x.x.x:A/project/; proxy_redirect http:// https://; proxy_set_header Host $host:B; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:4:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"参考 nginx 配置https 并解决重定向后https协议变成了http的问题 nginx处理redirect location端口丢失的问题 nginx配置https，重定向后https变成了http Nginx配置http访问自动跳转到https Nginix反向代理—https重定向后变http问题解决 深度硬核文:Nginx的301重定向处理过程分析 ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:5:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":null,"content":"说明 一个努力搞清楚带人管理的后端研发 ","date":"2023-02-26","objectID":"/about/:1:0","tags":null,"title":"说明","uri":"/about/"},{"categories":null,"content":" 总结日常百度的技术知识 记录工作中遇到的技术难题及解决方法 … 关键目录说明 demo案例 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:0:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"博客创建工具 hugo ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:1:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"新建博客仓库 hugo new site \u003c仓库名\u003e ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:2:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"关键目录说明 待补充… ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:3:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"demo案例 待补充… ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:4:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"本地起服务 先使用下面的查看本机IP ip a 找到下图中红色箭头指向的IP地址： 使用本机IP起服务 hugo server -D --bind \u003c本机IP\u003e --baseURL=http://\u003c本机IP\u003e ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:4:1","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"参考 Hugo中文文档 Hugo框架中文文档 内容管理 静态文件 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:5:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":["Docker"],"content":"问题描述 docker 容器重启后IP可能会变。 ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:1:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"问题原因解析 这里需要借助 docker 和 Linux 的网桥来给容器设置固定网络下的IP。 docker 有默认的网桥设置，默认网桥叫 docker0，可以借助命令 drctl show 来查看，网段在172.17.0.0/16。 ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:2:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"解决 首先创建一个 docker network # xxx.xxx.xxx.xxx/16 对应的子网掩码为 255.255.0.0 # xxx.xxx.xxx.xxx/24 对应的子网掩码为 255.255.255.0 docker network create --driver bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 mynet 下面操作二选一 停止并删除正在运行的容器，重新创建容器，在创建容器的 docker run ... 命令中加入参数 --network mynet 将某个容器加入到指定的网络中，使用命令 docker network connect \u003cnetworkName\u003e \u003ccontainerName\u003e ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:3:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"参考 Docker网络互联原理及自定义网络的使用 Docker网络 Pipework网络方案 ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:4:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"问题描述 每次启动虚拟机，docker 服务会自动启动，同时发现总是有几个容器会自动被启动。 而我们期望的是，docker服务自启动后，运行中的容器列表为空。 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:1:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"问题原因解析 这个问题是由 docker run 命令中的 --restart=always 参数设置导致的。 --restart 具体参数值有以下4个： no : 容器退出时，不重启容器 on-failure : 只有在非0状态退出时才从新启动容器 always : 无论退出状态是如何，都重启容器 unless-stopped : 在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:2:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"解决 docker update –restart=on-failure \u003c容器ID|容器名称\u003e ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:3:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"参考 Docker 容器开机启动设置 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:4:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"问题描述 虚拟机里，docker 容器部署的 nacos-ruoyi 无法访问到 docker 容器部署的 mysql 数据库 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:1:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"},{"categories":["Docker"],"content":"问题原因解析 这个问题是由 docker 本身的网络设置导致的。 安装docker时，docker会默认创建一个内部的桥接网络docker0，见下方样例。每创建一个容器分配一个虚拟网卡，容器之间可以根据ip互相访问。 [root@33fcf82ab4dd /]# [root@CentOS ~]# ifconfig ...... docker0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 172.17.0.1 netmask 255.255.0.0 broadcast 0.0.0.0 inet6 fe80::42:41ff:fe93:7102 prefixlen 64 scopeid 0x20\u003clink\u003e ether 02:42:41:93:71:02 txqueuelen 0 (Ethernet) RX packets 9374 bytes 737420 (720.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 10553 bytes 171557354 (163.6 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ...... ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:2:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"},{"categories":["Docker"],"content":"解决 输入 docker inspect 命令，查询 mysql-ruoyi 容器的虚拟网卡IP [root@localhost conf]# docker inspect mysql-ruoyi | grep IPAddress \"SecondaryIPAddresses\": null, \"IPAddress\": \"172.17.0.2\", \"IPAddress\": \"172.17.0.2\", 修改 nacos 启动配置文件中的 mysql IP 重启 nacos-ruoyi 容器 浏览器输入 http://192.168.133.128:8848/nacos/ ，访问正常 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:3:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"},{"categories":["Docker"],"content":"参考 Docker容器互访三种方式 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:4:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"}]