[{"categories":["Games","DST"],"content":"在 Ubuntu 系统中搭建饥荒联机版服务器。 ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:0:0","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"搭建步骤 ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:1:0","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"1. 安装steamcmd 64位机器： sudo dpkg --add-architecture i386 # If running a 64bit OS sudo apt-get update sudo apt-get install libstdc++6:i386 libgcc1:i386 libcurl4-gnutls-dev:i386 32位机器： sudo apt-get update sudo apt-get install libstdc++6 libgcc1 libcurl4-gnutls-dev 更多信息请参考：https://developer.valvesoftware.com/wiki/SteamCMD ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:1:1","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"2. 配置服务器令牌 访问Klei Accounts 网站并登录您的帐户。（请注意，该游戏的 Xbox 和 PlayStation 版本不支持专用服务器。）。 以steam为例，点击steam图标，跳转到steam登录页面，登录成功后，点击下方绿色按钮： 之后会跳转回Klei Accounts 网站。 登录成功后，在帐户页面上，访问“GAMES”选项卡，然后向下滚动到“饥荒联机版”并单击“Game Servers”按钮。 如果没有任何服务器，单击“Add New Server”按钮进行注册。如果有，单击绿色的“Configure Server”按钮。 在“Configure Server”页面中，您将找到一个包含一些选项的表单，您可以编辑这些选项来自定义您的服务器。准备好后，单击“Download Settings”按钮。下载 Zip 存档，解压内容，并将文件夹“MyDediServer”放入**~/.klei/DoNotStarveTogether/**中。 ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:1:2","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"3. 创建将运行服务器的脚本 下载此 shell 脚本并将其移至~/run_dedicated_servers.sh ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:1:3","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"4. 赋予脚本可执行权限 在终端中，运行：chmod u+x ~/run_dedicated_servers.sh ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:1:4","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"5. 运行脚本来启动专用服务器 在终端中，运行：~/run_dedicated_servers.sh ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:1:5","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["Games","DST"],"content":"参考 Forums - Klei ","date":"2023-10-14","objectID":"/post/games/dst/dedicated-server/:2:0","tags":["DST","server"],"title":"搭建饥荒联机版Linux服务器","uri":"/post/games/dst/dedicated-server/"},{"categories":["SonarQube"],"content":"SonarQube 指标 ","date":"2023-10-13","objectID":"/post/sonarqube/metrics/:0:0","tags":["SonarQube","metrics"],"title":"SonarQube 指标","uri":"/post/sonarqube/metrics/"},{"categories":["SonarQube"],"content":"SonarQube 指标 name val_type description lines INT Lines generated_lines INT Number of generated lines ncloc INT Non commenting lines of code new_lines INT New lines ncloc_language_distribution DATA Non Commenting Lines of Code Distributed By Language generated_ncloc INT Generated non Commenting Lines of Code classes INT Classes files INT Number of files directories INT Directories functions INT Functions statements INT Number of statements public_api INT Public API projects INT Number of projects comment_lines INT Number of comment lines comment_lines_density PERCENT Comments balanced by ncloc + comment lines public_documented_api_density PERCENT Public documented classes and functions balanced by ncloc public_undocumented_api INT Public undocumented classes, functions and variables commented_out_code_lines INT Commented lines of code complexity INT Cyclomatic complexity file_complexity FLOAT Complexity average by file complexity_in_classes INT Cyclomatic complexity in classes class_complexity FLOAT Complexity average by class complexity_in_functions INT Cyclomatic complexity in functions function_complexity FLOAT Complexity average by function class_complexity_distribution DISTRIB Classes distribution /complexity function_complexity_distribution DISTRIB Functions distribution /complexity file_complexity_distribution DISTRIB Files distribution /complexity cognitive_complexity INT Cognitive complexity tests INT Number of unit tests test_execution_time MILLISEC Execution duration of unit tests test_errors INT Number of unit test errors skipped_tests INT Number of skipped unit tests test_failures INT Number of unit test failures test_success_density PERCENT Density of successful unit tests test_data DATA Unit tests details coverage PERCENT Coverage by tests new_coverage PERCENT Coverage of new/changed code lines_to_cover INT Lines to cover new_lines_to_cover INT Lines to cover on new code uncovered_lines INT Uncovered lines new_uncovered_lines INT Uncovered lines on new code line_coverage PERCENT Line coverage new_line_coverage PERCENT Line coverage of added/changed code coverage_line_hits_data DATA Coverage hits by line conditions_to_cover INT Conditions to cover new_conditions_to_cover INT Conditions to cover on new code uncovered_conditions INT Uncovered conditions new_uncovered_conditions INT Uncovered conditions on new code branch_coverage PERCENT Condition coverage new_branch_coverage PERCENT Condition coverage of new/changed code conditions_by_line DATA Conditions by line covered_conditions_by_line DATA Covered conditions by line it_coverage PERCENT Integration tests coverage new_it_coverage PERCENT Integration tests coverage of new/changed code it_lines_to_cover INT Lines to cover by Integration Tests new_it_lines_to_cover INT Lines to cover on new code by integration tests it_uncovered_lines INT Uncovered lines by integration tests new_it_uncovered_lines INT New lines that are not covered by integration tests it_line_coverage PERCENT Line coverage by integration tests new_it_line_coverage PERCENT Integration tests line coverage of added/changed code it_coverage_line_hits_data DATA Coverage hits by line by integration tests it_conditions_to_cover INT Integration Tests conditions to cover new_it_conditions_to_cover INT Branches to cover by Integration Tests on New Code it_uncovered_conditions INT Uncovered conditions by integration tests new_it_uncovered_conditions INT New conditions that are not covered by integration tests it_branch_coverage PERCENT Condition coverage by integration tests new_it_branch_coverage PERCENT Integration tests condition coverage of new/changed code it_conditions_by_line DATA IT conditions by line it_covered_conditions_by_line DATA IT covered conditions by line overall_coverage PERCENT Overall test coverage new_overall_coverage PERCENT Overall coverage of new/changed code overall_lines_to_cover INT Overall lines to cover by all tests new_overall_lines_to_cover INT New lines to cover by all tests ","date":"2023-10-13","objectID":"/post/sonarqube/metrics/:1:0","tags":["SonarQube","metrics"],"title":"SonarQube 指标","uri":"/post/sonarqube/metrics/"},{"categories":["minio"],"content":"docker部署minio过程记录 ","date":"2023-09-30","objectID":"/post/minio/installation/:0:0","tags":["Docker","minio"],"title":"Docker部署minio","uri":"/post/minio/installation/"},{"categories":["minio"],"content":"1. 准备工作 1.1 拉取镜像： docker pull minio/minio 1.2 创建目录 mkdir /data/minio ","date":"2023-09-30","objectID":"/post/minio/installation/:1:0","tags":["Docker","minio"],"title":"Docker部署minio","uri":"/post/minio/installation/"},{"categories":["minio"],"content":"2. 部署 2.1 启动minio容器 docker run -p 19000:9000 -p 19090:9090 --name minio -d --restart=unless-stopped \\ -e \"MINIO_ROOT_USER=minio\" \\ -e \"MINIO_ROOT_PASSWORD=123456\" \\ -v /data/minio/data:/data \\ -v /data/minio/config:/root/.minio \\ minio/minio server /data \\ --console-address \":9000\" --address \":9090\" ","date":"2023-09-30","objectID":"/post/minio/installation/:2:0","tags":["Docker","minio"],"title":"Docker部署minio","uri":"/post/minio/installation/"},{"categories":["minio"],"content":"3. 访问minio操作台 浏览器访问http://localhost:19000，看到如下页面，部署完成。 ","date":"2023-09-30","objectID":"/post/minio/installation/:3:0","tags":["Docker","minio"],"title":"Docker部署minio","uri":"/post/minio/installation/"},{"categories":null,"content":"nvm安装教程，以v0.39.3版本为例。 ","date":"2023-06-03","objectID":"/post/tutorial/nvm/nvm_installation/:0:0","tags":["nvm","installation"],"title":"nvm安装教程","uri":"/post/tutorial/nvm/nvm_installation/"},{"categories":null,"content":"基于git安装（👈推荐） ","date":"2023-06-03","objectID":"/post/tutorial/nvm/nvm_installation/:1:0","tags":["nvm","installation"],"title":"nvm安装教程","uri":"/post/tutorial/nvm/nvm_installation/"},{"categories":null,"content":"💡前置依赖 git v1.7.10+ ","date":"2023-06-03","objectID":"/post/tutorial/nvm/nvm_installation/:1:1","tags":["nvm","installation"],"title":"nvm安装教程","uri":"/post/tutorial/nvm/nvm_installation/"},{"categories":null,"content":"🔨安装步骤 克隆nvm仓库到你的用户目录下 cd ~/，然后git clone https://github.com/nvm-sh/nvm.git .nvm cd ~/.nvm，然后切换到你想要的版本号（tag），比如v0.39.3 git checkout v0.39.3 在你的 shell 环境中激活 nvm：. ./nvm.sh 然后在你的环境变量配置文件中，加入以下几行，这样当你下次进入到命令行时会自动激活 nvm： export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm [ -s \"$NVM_DIR/bash_completion\" ] \u0026\u0026 \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion 此时，你已成功安装nvm工具！👏👏👏 ","date":"2023-06-03","objectID":"/post/tutorial/nvm/nvm_installation/:1:2","tags":["nvm","installation"],"title":"nvm安装教程","uri":"/post/tutorial/nvm/nvm_installation/"},{"categories":null,"content":"🚀更新版本 进入用户目录下的.nvm，然后切换到你想要的版本号（tag）即可。 cd ~/.nvm git checkout \u003ctag\u003e ","date":"2023-06-03","objectID":"/post/tutorial/nvm/nvm_installation/:1:3","tags":["nvm","installation"],"title":"nvm安装教程","uri":"/post/tutorial/nvm/nvm_installation/"},{"categories":null,"content":"参考 nvm安装指导文档 ","date":"2023-06-03","objectID":"/post/tutorial/nvm/nvm_installation/:2:0","tags":["nvm","installation"],"title":"nvm安装教程","uri":"/post/tutorial/nvm/nvm_installation/"},{"categories":null,"content":"nginx配置中，在443端口配了ssl证书，基于nginx代理地址访问websocket服务异常。 后端项目，使用SpringBoot框架，并基于spring自带的websocket功能开启了websocket服务。 在连接socket地址的时候发现，直连服务地址没问题，但是通过nginx代理地址连接异常，有如下报错： websocket Error: write EPROTO 66931976:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER:../../../../src/third_party/boringssl/src/ssl/tls_record.cc:242: ... 经过对比排查后发现，nginx代理的 location 块配置有问题。 ","date":"2023-06-02","objectID":"/post/socket/spring/2023-06-02/socket_nginx_ssl/:0:0","tags":["websocket","socket","nginx","springboot","spring"],"title":"websocket服务在nginx中代理后无法正常连接","uri":"/post/socket/spring/2023-06-02/socket_nginx_ssl/"},{"categories":null,"content":"解决 原来的 location 配置： location /api/ { proxy_pass http://x.x.x.x:8080; proxy_read_timeout 1200;#设置等待后台响应时间 proxy_next_upstream error timeout invalid_header http_500 http_503 http_404; proxy_cookie_path / /; client_max_body_size 1000m; proxy_set_header Host $proxy_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } 修改后的 location 配置： location /api/ { proxy_pass http://x.x.x.x:8080; proxy_read_timeout 1200;#设置等待后台响应时间 proxy_next_upstream error timeout invalid_header http_500 http_503 http_404; proxy_cookie_path / /; client_max_body_size 1000m; proxy_set_header Host $proxy_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; } ","date":"2023-06-02","objectID":"/post/socket/spring/2023-06-02/socket_nginx_ssl/:1:0","tags":["websocket","socket","nginx","springboot","spring"],"title":"websocket服务在nginx中代理后无法正常连接","uri":"/post/socket/spring/2023-06-02/socket_nginx_ssl/"},{"categories":null,"content":"Giscus是利用GitHub Discussions实现的评论系统，让访客借助 GitHub 在你的网站上留下评论和反应。 开源。🌏 无跟踪，无广告，永久免费。📡 🚫 无需数据库。所有数据均储存在 GitHub Discussions 中。:octocat: 支持自定义主题！🌗 支持多种语言。🌐 高可配置性。🔧 自动从 GitHub 拉取新评论与编辑。🔃 可自建服务！🤳 ","date":"2023-05-28","objectID":"/post/tutorial/hugo_giscus/:0:0","tags":["hugo","giscus","discussion","评论"],"title":"Hugo博客开启Giscus评论功能","uri":"/post/tutorial/hugo_giscus/"},{"categories":null,"content":"准备工作 你应该拥有一个公开类型的Github仓库，否则访客将无法查看 discussion。 Discussions 功能已在你的仓库中启用。 你需要安装 Giscus App，使其有权限访问对应仓库。 在完成以上步骤后，请前往 Giscus 页面 获得你的设置。 在页面中找到以下配置项： 依次填写仓库、页面 ↔️ discussion 映射关系、Discussion 分类、特性、主题，之后滚动到页面下部的 “启用 giscus” 部分，如下图所示： ","date":"2023-05-28","objectID":"/post/tutorial/hugo_giscus/:1:0","tags":["hugo","giscus","discussion","评论"],"title":"Hugo博客开启Giscus评论功能","uri":"/post/tutorial/hugo_giscus/"},{"categories":null,"content":"配置 复制 data-repo, data-repo-id, data-category 和 data-category-id 四项，填入你的配置中，因为它们是必须的。 以基于hugo的Fixit主题为例： [params] [params.page] [params.page.comment] [params.page.comment.giscus] enable = true repo = \"zhang-weiming/zhang-weiming.github.io\" # Giscus的data-repo字段 repoId = \"R_xxxxxxxxxx\" # Giscus的data-repo-id字段 category = \"General\" # Giscus的data-category字段 categoryId = \"DIC_xxxxxxxxxxxxxxxx\" # Giscus的data-category-id字段 mapping = \"pathname\" # Giscus的data-mapping字段 strict = \"0\" # Giscus的data-strict字段 term = \"\" reactionsEnabled = \"1\" emitMetadata = \"0\" inputPosition = \"bottom\" # [\"top\", \"bottom\"] lightTheme = \"light\" darkTheme = \"dark_dimmed\" lazyLoad = true ","date":"2023-05-28","objectID":"/post/tutorial/hugo_giscus/:2:0","tags":["hugo","giscus","discussion","评论"],"title":"Hugo博客开启Giscus评论功能","uri":"/post/tutorial/hugo_giscus/"},{"categories":["ide"],"content":" 老版本的IDEA在左侧的Project tab页下面都有一个Commit的对话框，但是在2022版本里默认不显示。 ","date":"2023-05-28","objectID":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/:0:0","tags":["idea","commit"],"title":"IDEA 2022版本没有commit对话框","uri":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/"},{"categories":["ide"],"content":"打开方式 打开设置，依次找到 Settings -\u003e Version Control -\u003e Commit，勾选Use non-modal commit interface。 此时，在左侧就能找到 Commit 对话框了。 还是熟悉的配方 😎 ","date":"2023-05-28","objectID":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/:1:0","tags":["idea","commit"],"title":"IDEA 2022版本没有commit对话框","uri":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/"},{"categories":["ide"],"content":"参考 IDEA 2022版本没有commit 对话框 ","date":"2023-05-28","objectID":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/:2:0","tags":["idea","commit"],"title":"IDEA 2022版本没有commit对话框","uri":"/post/ide/idea/2023-05-28/idea_v2022+_commit_view_window/"},{"categories":["MySQL"],"content":"年轻人，要善用临时表… ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:0:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"问题描述 删除一个较大体量的数据库后，发现mysql无法正常执行sql脚本，并给出以下报错： [error]/tmp/ib1tJjCi file has no space left 同时，发现服务器磁盘根目录满了！ [root@template ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/vda3 16G 15G 20K 100% / devtmpfs 32G 0 32G 0% /dev tmpfs 32G 0 32G 0% /dev/shm tmpfs 32G 3.3G 29G 11% /run tmpfs 32G 0 32G 0% /sys/fs/cgroup /dev/mapper/data-data_lv 600G 21G 579G 4% /data /dev/vda1 497M 123M 375M 25% /boot tmpfs 6.3G 0 6.3G 0% /run/user/1002 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:1:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"问题定位 执行命令： [root@template ~]# lsof |egrep 'tmp|deleted' ... mysqld 19544 20112 mysql 13u REG 253,3 0 8412343 /tmp/ibX4BLkY (deleted) mysqld 19544 20112 mysql 281u REG 253,3 0 8414596 /tmp/MLhfq6Il (deleted) mysqld 19544 20137 mysql 6u REG 253,3 0 8388677 /tmp/ib70QbfZ (deleted) mysqld 19544 20137 mysql 7u REG 253,3 0 8412302 /tmp/ibrctchx (deleted) mysqld 19544 20137 mysql 8u REG 253,3 0 8412305 /tmp/ibhPedj5 (deleted) mysqld 19544 20137 mysql 9u REG 253,3 0 8412317 /tmp/ib1tJjCi (deleted) mysqld 19544 20137 mysql 12uW REG 252,0 12582912 537507500 /data/mysql/ibtmp1 mysqld 19544 20137 mysql 13u REG 253,3 0 8412343 /tmp/ibX4BLkY (deleted) mysqld 19544 20137 mysql 281u REG 253,3 0 8414596 /tmp/MLhfq6Il (deleted) mysqld 19544 20138 mysql 6u REG 253,3 0 8388677 /tmp/ib70QbfZ (deleted) mysqld 19544 20138 mysql 7u REG 253,3 0 8412302 /tmp/ibrctchx (deleted) mysqld 19544 20138 mysql 8u REG 253,3 0 8412305 /tmp/ibhPedj5 (deleted) mysqld 19544 20138 mysql 9u REG 253,3 0 8412317 /tmp/ib1tJjCi (deleted) ... 发现mysqld进程有大量临时文件没有释放磁盘空间。 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:2:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"进一步定位 进入mysql安装目录，发现ibtmp1文件非常大 -rw-r----- 1 mysql mysql 41K May 22 12:33 ib_buffer_pool -rw-r----- 1 mysql mysql 268M May 23 00:13 ibdata1 -rw-r----- 1 mysql mysql 3.0G May 23 00:13 ib_logfile0 -rw-r----- 1 mysql mysql 3.0G May 23 00:13 ib_logfile1 -rw-r----- 1 mysql mysql 142G May 22 23:57 ibtmp1 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:3:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"解决 修改 my.cnf 配置文件 在 [mysqld] 下添加如下配置： [mysqld] ... innodb_temp_data_file_path = ibtmp1:12M:autoextend:max:5G 进入mysql命令行，设置 innodb_fast_shutdown 参数 SET GLOBAL innodb_fast_shutdown = 0; 关闭 mysql 服务 systemctl stop mysqld 删除 ibtmp1 文件（重启过程中会自动删除） 启动 mysql 服务 systemctl start mysqld ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:4:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"知识链接 innodb_fast_shutdown参数有3个值： 0 1 (默认值) 2 支持全动态局设置。 使用场景：在做数据库关闭升级的时候set global innodb_fast_shutdown=0，这样能最大保障数据的完整性。 设置为1：关闭MySQL的时候不会做清除脏页和插入缓冲区的合并操作，也不会将脏页刷新到磁盘 设置为0：会做清除脏页和插入缓冲区的合并操作，也会将脏页全部刷新到磁盘上面去，但是这个时候关闭的速度也是最慢的 设置为2：不会做清除脏页和插入缓冲区的合并操作，也不会将脏页刷新到磁盘，但是会刷新到redo log里面，再下次启动mysql的时候恢复 ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:5:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":"参考 mysql导致根目录爆满_MYSQL临时表导致根分区爆满问题分析 MySQL · 故障处理 · ibtmp1 文件过大 Mysql innodb_fast_shutdown ","date":"2023-05-22","objectID":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/:6:0","tags":["mysql","linux","ibtmp1","error"],"title":"MySQL执行较大sql脚本导致服务器跟目录占满","uri":"/post/mysql/2023-05-22/mysql%E6%89%A7%E8%A1%8C%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8D%A0%E6%BB%A1/"},{"categories":["MySQL"],"content":" 使用ConfigMap自定义mysql相关配置 持久化目录挂载 NodePort方式暴露端口 ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:0:0","tags":["k8s","mysql"],"title":"K8S部署MySQL 5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["MySQL"],"content":"ConfigMap apiVersion: v1 kind: ConfigMap metadata: name: mysql-config namespace: mysql labels: app: mysql data: my.cnf: |- [client] default-character-set=utf8mb4 [mysql] default-character-set=utf8mb4 [mysqld] character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci init_connect='SET NAMES utf8mb4' skip-character-set-client-handshake = true max_connections=2000 secure_file_priv=/var/lib/mysql bind-address=0.0.0.0 symbolic-links=0 sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:0:1","tags":["k8s","mysql"],"title":"K8S部署MySQL 5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["MySQL"],"content":"Service apiVersion: v1 kind: Service metadata: labels: app: mysql name: mysql-svc namespace: mysql spec: type: NodePort ports: - name: http port: 3306 protocol: TCP targetPort: 3306 selector: app: mysql ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:0:2","tags":["k8s","mysql"],"title":"K8S部署MySQL 5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["MySQL"],"content":"Deployment 这里是用hostPath方式挂载了主机目录，不推荐在生产环境中使用这种目录挂载方式，因为一旦Pod重启，可能会由于重新调度而发生漂移，新Pod被起在其他机器节点上，导致数据丢失。 建议使用nfs，以PVC的形式挂载持久化数据目录。 apiVersion: apps/v1 kind: Deployment metadata: name: mysql namespace: mysql spec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: containers: - args: - --datadir - /var/lib/mysql/datadir env: - name: MYSQL_ROOT_PASSWORD value: root - name: MYSQL_USER value: user - name: MYSQL_PASSWORD value: user image: mysql:5.7 name: mysql-container ports: - containerPort: 3306 name: dbapi volumeMounts: - mountPath: /var/lib/mysql name: mysql-storage - name: config mountPath: /etc/mysql/conf.d/my.cnf subPath: my.cnf volumes: - name: mysql-storage hostPath: path: /data/k8s/volumes/mysql type: Directory - name: config configMap: name: mysql-config - name: localtime hostPath: type: File path: /etc/localtime ","date":"2023-05-21","objectID":"/post/mysql/2023-05-21/mysql_k8s/:0:3","tags":["k8s","mysql"],"title":"K8S部署MySQL 5.7","uri":"/post/mysql/2023-05-21/mysql_k8s/"},{"categories":["Redis"],"content":" 使用ConfigMap自定义redis相关配置 NodePort方式暴露端口 ","date":"2023-05-21","objectID":"/post/redis/2023-05-21/redis_k8s/:0:0","tags":["k8s","mysql"],"title":"K8S部署Redis 3.0.7","uri":"/post/redis/2023-05-21/redis_k8s/"},{"categories":["Redis"],"content":"ConfigMap kind: ConfigMap apiVersion: v1 metadata: name: redis-config namespace: redis labels: app: redis data: redis.conf: |- dir /srv port 6379 bind 0.0.0.0 appendonly yes daemonize no #protected-mode no requirepass abc@12345678 pidfile /srv/redis-6379.pid ","date":"2023-05-21","objectID":"/post/redis/2023-05-21/redis_k8s/:0:1","tags":["k8s","mysql"],"title":"K8S部署Redis 3.0.7","uri":"/post/redis/2023-05-21/redis_k8s/"},{"categories":["Redis"],"content":"Service apiVersion: v1 kind: Service metadata: name: redis namespace: redis labels: app: redis spec: type: NodePort ports: - name: tcp port: 6379 nodePort: 30379 selector: app: redis ","date":"2023-05-21","objectID":"/post/redis/2023-05-21/redis_k8s/:0:2","tags":["k8s","mysql"],"title":"K8S部署Redis 3.0.7","uri":"/post/redis/2023-05-21/redis_k8s/"},{"categories":["Redis"],"content":"Deployment apiVersion: apps/v1 kind: Deployment metadata: name: redis namespace: redis labels: app: redis spec: replicas: 1 selector: matchLabels: app: redis template: metadata: labels: app: redis spec: containers: - name: redis image: redis:3.0.7 command: - \"sh\" - \"-c\" - \"redis-server /usr/local/redis/redis.conf\" ports: - containerPort: 6379 resources: limits: cpu: 1000m memory: 1024Mi requests: cpu: 1000m memory: 1024Mi livenessProbe: tcpSocket: port: 6379 initialDelaySeconds: 300 timeoutSeconds: 1 periodSeconds: 10 successThreshold: 1 failureThreshold: 3 readinessProbe: tcpSocket: port: 6379 initialDelaySeconds: 5 timeoutSeconds: 1 periodSeconds: 10 successThreshold: 1 failureThreshold: 3 volumeMounts: - name: config mountPath: /usr/local/redis/redis.conf subPath: redis.conf volumes: - name: config configMap: name: redis-config ","date":"2023-05-21","objectID":"/post/redis/2023-05-21/redis_k8s/:0:3","tags":["k8s","mysql"],"title":"K8S部署Redis 3.0.7","uri":"/post/redis/2023-05-21/redis_k8s/"},{"categories":["ide"],"content":"在安装TheiaIDE过程中，遇到诸多报错问题，在此记录一下问题解决过程。 官方给出的安装过程相关命令，简洁的让人觉得不简单… git clone https://kgithub.com/eclipse-theia/theia \\ \u0026\u0026 cd theia \\ \u0026\u0026 yarn \\ \u0026\u0026 yarn download:plugins \\ \u0026\u0026 yarn browser build \\ \u0026\u0026 yarn browser start ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:0:0","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"Theia 源码和官方文档 源码：https://github.com/eclipse-theia/theia 文档：https://github.com/eclipse-theia/theia/tree/master/doc#quick-start theia/doc/Developing.md ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:1:0","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"可能遇到的问题以及解决方法 ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:2:0","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"问题1：安装依赖报错，前置依赖版本不匹配 根据提示，安装各个依赖的对应版本即可。 CentOS安装软件包命令模板： yum install -y \u003cpackage name\u003e-\u003cversion\u003e ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:2:1","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"问题2：g++报错，无法识别命令参数 -std=gnu++14 报错如下： ... make: Entering directory `/root/theiaide/theia/node_modules/nsfw/build' CXX(target) Release/obj.target/nsfw/src/NSFW.o g++: error: unrecognized command line option ‘-std=gnu++14’ make: *** [Release/obj.target/nsfw/src/NSFW.o] Error 1 make: Leaving directory `/root/theiaide/theia/node_modules/nsfw/build' 解决： 安装前置依赖 scl yum install -y centos-release-scl 安装 gcc 8 版本 yum install -y devtoolset-8-gcc devtoolset-8-gcc-c++ devtoolset-8中的gcc版本为gcc 8，除此之外还有如下版本： devtoolset-3: gcc 4.9 devtoolset-4: gcc 5 devtoolset-6: gcc 6 devtoolset-7: gcc 7 devtoolset-8: gcc 8 备份已有 gcc/g++ 命令，更新成 gcc/g++8 mv /usr/bin/gcc /usr/bin/gcc-bak4.8.5 mv /usr/bin/g++ /usr/bin/g++-bak4.8.5 ln -s /opt/rh/devtoolset-8/root/bin/gcc /usr/bin/gcc ln -s /opt/rh/devtoolset-8/root/bin/g++ /usr/bin/g++ 查看版本 [root@localhost ~]# gcc --version gcc (GCC) 8.3.1 20190311 (Red Hat 8.3.1-3) Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. [root@localhost ~]# g++ --version g++ (GCC) 8.3.1 20190311 (Red Hat 8.3.1-3) Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:2:2","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"问题3：yarn安装依赖过程中，gyp报错：exit status 2 报错原因： 缺少bzip2命令，安装依赖过程中，无法解压 .bz2 压缩包进而报错。 解决： 安装bzip2命令 yum install -y bzip2 删除 node_modules 目录 再次执行 yarn ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:2:3","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"问题4：yarn安装electron报错 报错如下： error /root/theiaide/theia/node_modules/electron: Command failed. Exit code: 1 Command: node install.js Arguments: Directory: /root/theiaide/theia/node_modules/electron Output: RequestError: connect ETIMEDOUT 20.205.243.166:443 at ClientRequest.\u003canonymous\u003e (/root/theiaide/theia/node_modules/electron/node_modules/got/source/request-as-event-emitter.js:178:14) at Object.onceWrapper (node:events:628:26) at ClientRequest.emit (node:events:525:35) at ClientRequest.origin.emit (/root/theiaide/theia/node_modules/electron/node_modules/@szmarczak/http-timer/source/index.js:37:11) at TLSSocket.socketErrorListener (node:_http_client:481:9) at TLSSocket.emit (node:events:513:28) 解决： 设置环境变量： export NODE_TLS_REJECT_UNAUTHORIZED=0 ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:2:4","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["ide"],"content":"参考 TheiaIDE 文档 - Github 部署相关文档在theia/doc/Developing.md文件中 centos安装python3详细教程 centos下升级g++版本 ","date":"2023-05-10","objectID":"/post/ide/webide/2023-05-10/theiaide_installation/:3:0","tags":["theia","ide","webide","error"],"title":"TheiaIDE安装部署时，可能出现的几个问题","uri":"/post/ide/webide/2023-05-10/theiaide_installation/"},{"categories":["Nginx"],"content":"解决Nginx反向代理服务后，在页面跳转过程中，重定向的URL丢失了端口，导致页面访问异常。 ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:0:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"问题现象 project服务默认使用端口80，我们通过修改配置，将其端口修改为A，并增加路由前缀/project/。 现在，project服务访问地址为：http://x.x.x.x:A/project/。 我们在Nginx里做了一层代理，Nginx配置如下： server { listen B ssl; server_name y.y.y.y; ... location /project/ { proxy_pass http://x.x.x.x:A/project/; } } 代理之后，当project服务返回302重定向时，端口就会消失，流程如下： 访问project主页地址：http://x.x.x.x:A/project/； 查看请求信息，可以看到如下信息，说明URL重定向到了登录页面，但是丢失了端口： General: Status Code: 302 Found Response Headers： Location: https://x.x.x.x/project/signin # 这里给出的地址就是重定向后的目标地址 手动添加端口后访问页面正常：https://x.x.x.x:A/project/signin ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:1:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"初步尝试 最开始的解决方案是修改响应头里的Location字段。 参考资料 Apache和Nginx自定义修改Response Header中的Location值 Nginx里Header修改 但由于改动过大，放弃了该方案。 经过进一步查找资料，进行了如下配置。配完以后，发现端口不再丢失，但是协议从https变成了http。 location /project/ { proxy_set_header Host $http_host; # 添加了这一行 proxy_pass http://x.x.x.x:A/project/; } ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:2:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"不完美解决方案 其实算是个不完整的Nginx配置，配置步骤如下： 将请求代理到http协议的80端口； server { listen B ssl; server_name y.y.y.y; ... location /project/ { # 1、现将请求代理到http协议的B端口（内部映射到80） proxy_set_header Host $host:80; proxy_pass http://x.x.x.x:A/project/; } } 再将80端口的请求全部重定向到https协议的A端口。 server { listen 80; server_name y.y.y.y; ... # 2、将http-80端口的全部请求重定向到https-B端口 location / { return 301 https://x.x.x.x:B$request_uri; } } ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:3:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"最终解决方案 server { listen B ssl; server_name y.y.y.y; ... location /project/ { proxy_pass http://x.x.x.x:A/project/; proxy_redirect http:// https://; proxy_set_header Host $host:B; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:4:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":["Nginx"],"content":"参考 nginx 配置https 并解决重定向后https协议变成了http的问题 nginx处理redirect location端口丢失的问题 nginx配置https，重定向后https变成了http Nginx配置http访问自动跳转到https Nginix反向代理—https重定向后变http问题解决 深度硬核文:Nginx的301重定向处理过程分析 ","date":"2023-03-09","objectID":"/post/nginx/2023-03-09/nginx/:5:0","tags":["nginx","反向代理","重定向"],"title":"Nginx代理后，端口丢失和https变为http的问题","uri":"/post/nginx/2023-03-09/nginx/"},{"categories":null,"content":"说明 一个努力搞清楚带人管理的后端研发 ","date":"2023-02-26","objectID":"/about/:1:0","tags":null,"title":"说明","uri":"/about/"},{"categories":null,"content":" 总结日常百度的技术知识 记录工作中遇到的技术难题及解决方法 … 关键目录说明 demo案例 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:0:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"博客创建工具 hugo hugo-中文文档 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:1:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"新建博客仓库 hugo new site \u003c仓库名\u003e ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:2:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"关键目录说明 敬请期待 😜 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:3:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"demo案例 敬请期待 😋 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:4:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"本地起服务 先使用下面的查看本机IP ip a 找到下图中红色箭头指向的IP地址： 使用本机IP起服务 hugo server -D --bind \u003c本机IP\u003e --baseURL=http://\u003c本机IP\u003e ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:4:1","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":null,"content":"参考 Hugo中文文档 Hugo框架中文文档 内容管理 静态文件 ","date":"2023-02-25","objectID":"/post/tutorial/hugo_tutorial/:5:0","tags":["hugo","博客"],"title":"hugo开发博客","uri":"/post/tutorial/hugo_tutorial/"},{"categories":["Docker"],"content":"docker 容器重启后IP可能会变… ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:0:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"原因解析 这里需要借助 docker 和 Linux 的网桥来给容器设置固定网络下的IP。 docker 有默认的网桥设置，默认网桥叫 docker0，可以借助命令 drctl show 来查看，网段在172.17.0.0/16。 ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:1:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"解决 首先创建一个 docker network # xxx.xxx.xxx.xxx/16 对应的子网掩码为 255.255.0.0 # xxx.xxx.xxx.xxx/24 对应的子网掩码为 255.255.255.0 docker network create --driver bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 mynet 下面操作二选一 停止并删除正在运行的容器，重新创建容器，在创建容器的 docker run ... 命令中加入参数 --network mynet 将某个容器加入到指定的网络中，使用命令 docker network connect \u003cnetworkName\u003e \u003ccontainerName\u003e ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:2:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"参考 Docker网络互联原理及自定义网络的使用 Docker网络 Pipework网络方案 ","date":"2022-10-04","objectID":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/:3:0","tags":["Docker","network","IP"],"title":"Docker容器重启IP不固定","uri":"/post/docker/2022-10-04/docker%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AFip%E4%B8%8D%E5%9B%BA%E5%AE%9A/"},{"categories":["Docker"],"content":"每次启动虚拟机，docker 服务会自动启动，同时发现是总是有几个不需要的容器会被自动拉起… 期望是，docker服务自启动或重启后，正在运行中的容器中只有我们想要的。 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:0:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"原因解析 出现这个现象是因为在之前使用docker run命令拉起容器时，使用了--restart=always参数设置导致的。 --restart的参数值有以下4个： no：容器退出时，不重启容器。 on-failure：只有在非0状态退出时才从新启动容器。 always：无论退出状态是如何，都重启容器。 unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器。 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:1:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"解决 更新容器的--restart参数： docker update --restart=on-failure \u003c容器ID|容器名称\u003e 在之后拉起容器的时候，不要随意使用--restart=always参数项。 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:2:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"参考 Docker 容器开机启动设置 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/:3:0","tags":["Docker","container","restart"],"title":"Docker服务启动时，容器自动被拉起","uri":"/post/docker/2022-09-29/docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%97%B6%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E8%A2%AB%E6%8B%89%E8%B5%B7/"},{"categories":["Docker"],"content":"虚拟机里，docker 容器部署的 nacos-ruoyi 无法访问到 docker 容器部署的 mysql 数据库 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:0:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"},{"categories":["Docker"],"content":"原因解析 这个问题是由 docker 本身的网络设置导致的。 安装docker时，docker会默认创建一个内部的桥接网络docker0，见下方样例。每创建一个容器分配一个虚拟网卡，容器之间可以根据ip互相访问。 [root@33fcf82ab4dd /]# [root@CentOS ~]# ifconfig ...... docker0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 172.17.0.1 netmask 255.255.0.0 broadcast 0.0.0.0 inet6 fe80::42:41ff:fe93:7102 prefixlen 64 scopeid 0x20\u003clink\u003e ether 02:42:41:93:71:02 txqueuelen 0 (Ethernet) RX packets 9374 bytes 737420 (720.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 10553 bytes 171557354 (163.6 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ...... ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:1:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"},{"categories":["Docker"],"content":"解决 输入docker inspect命令，查询容器的虚拟网卡IP： [root@localhost conf]# docker inspect mysql-ruoyi | grep IPAddress ... \"SecondaryIPAddresses\": null, \"IPAddress\": \"172.17.0.2\", \"IPAddress\": \"172.17.0.2\", ... 修改 nacos 启动配置文件中的 mysql IP 重启容器 浏览器输入页面地址，验证访问正常 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:2:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"},{"categories":["Docker"],"content":"参考 Docker容器互访三种方式 ","date":"2022-09-29","objectID":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/:3:0","tags":["Docker","network"],"title":"Docker网络设置","uri":"/post/docker/2022-09-29/docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"}]